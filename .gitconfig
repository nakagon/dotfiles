[url "https://github.com/"]
  insteadOf = git@github.com:
[user]
	name = nakahiro
	email = nakahiro1981@gmail.com
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto
[push]
  default = tracking
[core]
  excludesfile = /Users/nakahiro/.gitignore
  pager = lv -c -Ou8
  editor = vim -c \"set fenc=utf-8\"
	autocrlf = false
[alias]
  st = status -sb
  sta = status
  sh = show
  so = remote show origin
  ft = fetch
  up = pull --rebase       # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  ad = add
  ci = commit
  cam = commit -a --amend  # 直前のcommitを修正
  co = checkout
  cb = checkout -b
  cm = checkout master
  # branch関連
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  bo = branch -r
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-al = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-a = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  logall = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  logal = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  loga = log --graph --all --color --pretty='%x09%h %s %C(yellow)[%an]%Creset %Cred%d%Creset'
  lga = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  df = diff
  dif = diff
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  sm = submodule
  sma = submodule add
  smi = submodule update --init
  smu = submodule foreach "git checkout master; git pull origin master"
  smupdate = submodule foreach "git checkout master; git pull origin master"
  show-graph = log --graph --abbrev-commit --pretty=oneline
  feature = flow feature
  release = flow release
  hotfix = flow hotfix
  hooks = hooks
  ticket = ticket
  rma = "!f() { git ls-files --deleted | sort -u }; git rm `f`"
  rebase-status = "!f() { GIT_DIR=`git rev-parse --git-dir`;if [ -d $GIT_DIR/rebase-merge -o -f $GIT_DIR/rebase-apply/rebasing ]; then if [ -f $GIT_DIR/rebase-merge/interactive ]; then br='rebase-i'; else br='rebase-m'; fi; echo 'rebasing...('$br')'; else echo 'not rebasing.'; fi }; f"
  i = issue m
  ia = issue
  prepush = "! gitprepush.sh"
  dmb = "!f () { git checkout $1; git branch --merged|egrep -v '\\*|develop|main|master'|xargs git branch -d; };f"
[init]
  templatedir = ~/.git_template
[pre-push]
  cmd = git log --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset' {}
# github config in /etc/gitconfig
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]


[safe]
	directory = /workspaces/wm-uzo-media-admin
